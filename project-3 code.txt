app.py

from flask import Flask, render_template, request, jsonify, session, send_file, redirect, url_for, flash, abort
from werkzeug.utils import secure_filename
from datetime import datetime
import os
import mysql.connector
import subprocess
import logging
from auth import auth_bp

app = Flask(__name__)
app.secret_key = os.environ.get('SECRET_KEY', 'your_default_secret_key')

app.register_blueprint(auth_bp)

# Logging
logging.basicConfig(level=logging.DEBUG)

# Config
app.config['UPLOAD_FOLDER'] = 'uploads'
os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)
app.config['MAX_CONTENT_LENGTH'] = 100 * 1024 * 1024  # 100MB

ALLOWED_EXTENSIONS = {'pdf', 'docx'}
CLAMAV_EXE = r"C:\ClamAV\clamav-1.4.2.win.x64\clamscan.exe"
CLAMAV_DB = r"C:\ClamAV\db"

def get_db_connection():
    return mysql.connector.connect(
        host="localhost",
        user="root",
        password="",
        database="file_transfer"
    )

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

@app.route('/')
def upload_page():
    if 'sender' not in session:
        return redirect(url_for('auth.login'))
    return render_template('upload.html', username=session['sender'])

@app.route('/upload', methods=['POST'])
def upload_file():
    if 'sender' not in session:
        return redirect(url_for('auth.login'))

    sender = session['sender']
    receiver_name = request.form.get('receiver_name')
    files = request.files.getlist('files[]')

    if not receiver_name:
        return jsonify({'error': 'Receiver name is required'}), 400
    if not files:
        return jsonify({'error': 'No files provided'}), 400

    conn = get_db_connection()
    cursor = conn.cursor()

    for file in files:
        if file and allowed_file(file.filename):
            filename = secure_filename(file.filename)
            filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)

            if os.path.exists(filepath):
                name, ext = os.path.splitext(filename)
                filename = f"{name}_{int(datetime.now().timestamp())}{ext}"
                filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)

            file.save(filepath)
            filesize = os.path.getsize(filepath)

            if filesize > app.config['MAX_CONTENT_LENGTH']:
                os.remove(filepath)
                continue

            cursor.execute("""
                INSERT INTO files (sender, receiver_name, filename, filesize, filepath, upload_time, status)
                VALUES (%s, %s, %s, %s, %s, %s, %s)
            """, (sender, receiver_name, filename, filesize, filepath, datetime.now(), 'Queued'))
            file_id = cursor.lastrowid
            conn.commit()

            try:
                result = subprocess.run(
                    [CLAMAV_EXE, f"--database={CLAMAV_DB}", filepath],
                    capture_output=True,
                    text=True,
                    timeout=30
                )
                if "FOUND" in result.stdout:
                    os.remove(filepath)
                    cursor.execute("UPDATE files SET status = %s WHERE id = %s", ('Deleted by AV', file_id))
                else:
                    cursor.execute("UPDATE files SET status = %s WHERE id = %s", ('Clean', file_id))
            except subprocess.TimeoutExpired:
                cursor.execute("UPDATE files SET status = %s WHERE id = %s", ('AV scan timeout', file_id))
            except Exception as e:
                cursor.execute("UPDATE files SET status = %s WHERE id = %s", ('AV scan failed', file_id))

    conn.commit()
    cursor.close()
    conn.close()
    return jsonify({'message': 'Files uploaded and scanned'}), 200

@app.route('/download')
def download_page():
    if 'sender' not in session:
        return redirect(url_for('auth.login'))

    conn = get_db_connection()
    cursor = conn.cursor(dictionary=True)
    cursor.execute("SELECT id, filename FROM files WHERE filename LIKE '%.pdf'")
    files = cursor.fetchall()
    cursor.close()
    conn.close()
    return render_template('download.html', files=files)

@app.route('/view/<int:file_id>')
def view_file(file_id):
    if 'sender' not in session:
        return redirect(url_for('auth.login'))

    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT filepath FROM files WHERE id = %s", (file_id,))
    result = cursor.fetchone()
    cursor.close()
    conn.close()

    if result:
        filepath = result[0]
        return send_file(filepath, as_attachment=(request.args.get('download') == '1'))
    abort(404)

@app.route('/view-sent')
def view_sent():
    if 'sender' not in session:
        return redirect(url_for('auth.login'))

    sender = session['sender']
    conn = get_db_connection()
    cursor = conn.cursor(dictionary=True)
    cursor.execute("""
        SELECT id, filename, receiver_name, upload_time, status 
        FROM files 
        WHERE sender = %s
        ORDER BY upload_time DESC
    """, (sender,))
    files = cursor.fetchall()
    cursor.close()
    conn.close()
    return render_template('view_sent.html', files=files, username=sender)

if __name__ == '__main__':
    app.run(debug=True)
-----------------------------------

database.py

import mysql.connector

def insert_file(sender, receiver_name, receiver_email, filename, filesize, filepath):
    conn = mysql.connector.connect(
        host="localhost",
        user="root",
        password="",
        database="file_transfer"
    )
    cursor = conn.cursor()
    sql = "INSERT INTO files (sender, receiver_name, receiver_email, filename, filesize, filepath) VALUES (%s, %s, %s, %s, %s, %s)"
    val = (sender, receiver_name, receiver_email, filename, filesize, filepath)
    cursor.execute(sql, val)
    conn.commit()
    conn.close()

---------------------------------------------------------
auth.py

from flask import Blueprint, render_template, request, redirect, url_for, session, flash
from werkzeug.security import check_password_hash, generate_password_hash
import mysql.connector

auth_bp = Blueprint('auth', __name__)

def get_db_connection():
    return mysql.connector.connect(
        host="localhost",
        user="root",
        password="",
        database="file_transfer"
    )

@auth_bp.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']

        conn = get_db_connection()
        cursor = conn.cursor(dictionary=True)
        cursor.execute("SELECT * FROM users WHERE username = %s", (username,))
        user = cursor.fetchone()
        cursor.close()
        conn.close()

        if user and check_password_hash(user['password_hash'], password):
            session['sender'] = user['username']
            flash('Login successful!', 'success')
            return redirect(url_for('upload_page'))
        else:
            flash('Invalid username or password', 'error')
            return redirect(url_for('auth.login'))

    return render_template('login.html')

@auth_bp.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        password_hash = generate_password_hash(password)

        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("INSERT INTO users (username, password_hash) VALUES (%s, %s)", (username, password_hash))
        conn.commit()
        cursor.close()
        conn.close()

        flash('Registration successful. Please log in.', 'success')
        return redirect(url_for('auth.login'))

    return render_template('register.html')

@auth_bp.route('/logout')
def logout():
    session.clear()
    flash('Logged out successfully.', 'success')
    return redirect(url_for('auth.login'))

--------------------------------------------------------------------------------
upload.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Upload Files</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
</head>
<body>
<div class="header">üìÅ File Transfer App</div>
<div class="container">
    <div class="menu">
        <ul>
            <li class="active"><a href="{{ url_for('upload_page') }}">Upload</a></li>
            <li><a href="{{ url_for('download_page') }}">Download</a></li>
            <li><a href="{{ url_for('view_sent') }}">View Sent</a></li>
            <li><a href="{{ url_for('auth.logout') }}">Logout</a></li> <!-- üëà New logout link -->
        </ul>
    </div>
    <div class="content">
        <h2>Upload Files</h2>
        <form id="uploadForm">
            <input type="text" name="receiver_name" placeholder="Enter Receiver ID" class="input-modern" required>
            <input type="email" name="receiver_email" placeholder="Enter Receiver Email" class="input-modern" required>

            <div id="dropArea">üìÇ Drag & Drop Files Here or Click to Select</div>
            <input type="file" id="fileInput" multiple name="files[]" hidden>
            <div id="fileList"></div>

            <p style="color: #2b6cb0; font-size: 14px; margin-bottom: 10px;">
              ‚ö†Ô∏è Please upload PDF or DOCX files only. Maximum file size: <strong>100 MB</strong>.
            </p>

            <div class="progress-container">
                <div id="progressBarText">0%</div>
                <div class="progress">
                    <div class="progress-bar" id="progressBar"></div>
                </div>
            </div>

            <button type="submit" class="btn-submit">üöÄ Upload</button>
        </form>
    </div>
</div>
<div class="footer">¬© 2025 File Transfer</div>

<script src="{{ url_for('static', filename='js/upload.js') }}"></script>
</body>
</html>

------------------------------------------------------------------

download.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Download Files</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
</head>
<body>
<div class="header">üìÅ File Transfer App</div>
<div class="container">
    <div class="menu">
        <ul>
            <li><a href="{{ url_for('upload_page') }}">Upload</a></li>
            <li class="active"><a href="{{ url_for('download_page') }}">Download</a></li>
            <li><a href="{{ url_for('view_sent') }}">View Sent</a></li>
            <li><a href="{{ url_for('auth.logout') }}">Logout</a></li> <!-- üëà New logout link -->
        </ul>
    </div>
    <div class="content">
        <h2>üì• Available PDF Files</h2>
        {% if files %}
        <table>
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>PDF</th>
                    <th>View</th>
                </tr>
            </thead>
            <tbody>
                {% for file in files %}
                <tr>
                    <td>{{ file.id }}</td>
                    <td>{{ file.filename }}</td>
                    <td>PDF</td>
                    <td>
                        <a href="{{ url_for('view_file', file_id=file.id) }}" target="_blank">View</a> |
                        <a href="{{ url_for('view_file', file_id=file.id) }}?download=1">Download</a>
                    </td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
        {% else %}
        <p>No PDF files available.</p>
        {% endif %}
    </div>
</div>
<div class="footer">¬© 2025 File Transfer</div>
</body>
</html>

----------------------------------------------------------------------------------------------------------
view_sent.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Sent Files</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
</head>
<body>
<div class="header">üìÅ File Transfer App</div>
<div class="container">
    <div class="menu">
        <ul>
            <li><a href="{{ url_for('upload_page') }}">Upload</a></li>
            <li><a href="{{ url_for('download_page') }}">Download</a></li>
            <li class="active"><a href="{{ url_for('view_sent') }}">View Sent</a></li>
            <li><a href="{{ url_for('auth.logout') }}">Logout</a></li>
        </ul>
    </div>
    <div class="content">
        <h2>üì¶ Files Sent by You</h2>
        {% if files %}
        <table>
            <thead>
                <tr>
                    <th>Filename</th>
                    <th>Receiver</th>
                    <th>Uploaded</th>
                    <th>Status</th>
                </tr>
            </thead>
            <tbody>
                {% for file in files %}
                <tr>
                    <td>{{ file.filename }}</td>
                    <td>{{ file.receiver_name }}</td>
                    <td>{{ file.upload_time }}</td>
                    <td>{{ file.status }}</td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
        {% else %}
        <p>No files uploaded yet.</p>
        {% endif %}
    </div>
</div>
<div class="footer">¬© 2025 File Transfer</div>
</body>
</html>

----------------------------------------------------------------------

login.html

<!DOCTYPE html>
<html lang="en">
<head>
    <title>Login</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
</head>
<body>
<div class="header">üîê Login</div>
<div class="content">
    <form method="POST" action="{{ url_for('auth.login') }}">
        <input type="text" name="username" class="input-modern" placeholder="Username" required><br>
        <input type="password" name="password" class="input-modern" placeholder="Password" required><br>
        <button class="btn-submit" type="submit">Login</button>
        
        
        {% with messages = get_flashed_messages(with_categories=true) %}
          {% if messages %}
            {% for category, message in messages %}
              <p class="flash-message {{ category }}">{{ message }}</p>
            {% endfor %}
          {% endif %}
        {% endwith %}
    </form>
</div>
</body>
</html>

----------------------------------------------------------------
style.css

/* Reset */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Segoe UI', sans-serif;
    background: #f2f4f8;
    display: flex;
    flex-direction: column;
    min-height: 100vh;
}

/* Header */
.header {
    background-color: #1f2937;
    color: #ffffff;
    text-align: center;
    padding: 20px;
    font-size: 24px;
    font-weight: bold;
}

/* Footer */
.footer {
    background-color: #1f2937;
    color: #ffffff;
    text-align: center;
    padding: 10px;
    margin-top: auto;
}

/* Main Layout */
.container {
    display: flex;
    min-height: calc(100vh - 120px); /* full height minus header/footer */
}

/* Sidebar Menu */
.menu {
    width: 200px;
    background: #2d3748;
}

.menu ul {
    list-style: none;
}

.menu li {
    color: #cbd5e0;
    padding: 15px;
    cursor: pointer;
    border-bottom: 1px solid #4a5568;
    transition: background 0.3s;
}

.menu li:hover,
.menu li.active {
    background-color: #4a5568;
    color: white;
}

/* Content Area */
.content {
    flex: 1;
    padding: 40px;
    display: flex;
    flex-direction: column;
    align-items: center;
}

/* Headings */
.content h2 {
    margin-bottom: 20px;
    font-size: 22px;
    color: #2d3748;
}

/* Modern Input Field */
.input-modern {
    width: 100%;
    max-width: 400px;
    padding: 12px 20px;
    margin-bottom: 20px;
    border: 1px solid #ccc;
    border-radius: 8px;
    font-size: 16px;
    box-shadow: 0 1px 4px rgba(0, 0, 0, 0.1);
}

/* Drag & Drop Area */
#dropArea {
    width: 100%;
    max-width: 500px;
    height: 200px;
    border: 2px dashed #3182ce;
    border-radius: 12px;
    background: #e6f0ff;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #2b6cb0;
    font-size: 18px;
    text-align: center;
    margin-bottom: 15px;
    transition: background 0.3s;
}

#dropArea:hover {
    background: #d0e7ff;
    cursor: pointer;
}

/* File List Preview */
#fileList {
    max-width: 500px;
    margin: 10px 0;
    font-size: 14px;
    color: #4a5568;
}

/* Upload Button */
.btn-submit {
    padding: 12px 25px;
    background-color: #3182ce;
    color: white;
    border: none;
    border-radius: 6px;
    font-size: 16px;
    cursor: pointer;
    margin-top: 15px;
    transition: background 0.3s;
}

.btn-submit:hover {
    background-color: #2b6cb0;
}

/* Progress Bar */
.progress-container {
    width: 100%;
    max-width: 500px;
    margin-top: 10px;
}

.progress {
    background-color: #e2e8f0;
    border-radius: 10px;
    overflow: hidden;
    height: 20px;
    margin-top: 5px;
}

.progress-bar {
    height: 100%;
    background: linear-gradient(90deg, #4299e1, #90cdf4);
    width: 0%;
    transition: width 0.3s ease;
    text-align: center;
    color: white;
    font-size: 14px;
}

#progressBarText {
    text-align: right;
    font-size: 14px;
    color: #2d3748;
    padding-bottom: 4px;
}

/* Table Styling */
table {
    border-collapse: collapse;
    width: 100%;
    max-width: 800px;
    background: #fff;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    margin-top: 30px;
}

table th, table td {
    padding: 12px 16px;
    text-align: left;
    border-bottom: 1px solid #e2e8f0;
    font-size: 15px;
}

table th {
    background-color: #f7fafc;
    color: #2d3748;
    font-weight: 600;
}

table tr:hover {
    background-color: #edf2f7;
}

/* Links */
a {
    color: #3182ce;
    text-decoration: none;
}

a:hover {
    text-decoration: underline;
}

.flash-message.success {
    color: green;
    font-weight: bold;
    margin-top: 10px;
}

.flash-message.error {
    color: red;
    font-weight: bold;
    margin-top: 10px;
}

.flash-message {
    padding: 10px 15px;
    margin-top: 15px;
    border-radius: 5px;
    font-weight: bold;
    width: fit-content;
}

.flash-message.success {
    background-color: #d4edda;
    color: #155724;
    border: 1px solid #c3e6cb;
}

.flash-message.error {
    background-color: #f8d7da;
    color: #721c24;
    border: 1px solid #f5c6cb;
}

-------------------------------------------------------------------------------------------

upload.js

const dropArea = document.getElementById('dropArea');
const fileInput = document.getElementById('fileInput');
const fileList = document.getElementById('fileList');
const form = document.getElementById('uploadForm');
const progressBar = document.getElementById('progressBar');
const progressBarText = document.getElementById('progressBarText');

dropArea.addEventListener('click', () => fileInput.click());

dropArea.addEventListener('dragover', (e) => {
    e.preventDefault();
    dropArea.style.background = '#d0e7ff';
});

dropArea.addEventListener('dragleave', () => {
    dropArea.style.background = '#e6f0ff';
});

dropArea.addEventListener('drop', (e) => {
    e.preventDefault();
    dropArea.style.background = '#e6f0ff';
    fileInput.files = e.dataTransfer.files;
    showFiles(fileInput.files);
});

fileInput.addEventListener('change', () => {
    showFiles(fileInput.files);
});

function showFiles(files) {
    fileList.innerHTML = '';
    const allowedTypes = [
        'application/pdf',
        'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
    ];

    for (let file of files) {
        if (!allowedTypes.includes(file.type)) {
            alert(`${file.name} is not a supported file type.`);
            fileInput.value = '';
            fileList.innerHTML = '';
            return;
        }

        if (file.size > 100 * 1024 * 1024) {
            alert(`${file.name} exceeds 100MB limit.`);
            fileInput.value = '';
            fileList.innerHTML = '';
            return;
        }

        const item = document.createElement('div');
        item.textContent = `${file.name} (${Math.round(file.size / 1024)} KB)`;
        fileList.appendChild(item);
    }
}

form.addEventListener('submit', function (e) {
    e.preventDefault();

    const formData = new FormData();
    const receiverID = form.receiver_name.value.trim();
    const receiverEmail = form.receiver_email.value.trim();

    if (!receiverID || !receiverEmail) {
        alert("Receiver ID and Email are required.");
        return;
    }

    formData.append('receiver_name', receiverID);
    formData.append('receiver_email', receiverEmail);

    const files = fileInput.files;
    const allowedTypes = [
        'application/pdf',
        'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
    ];

    for (let i = 0; i < files.length; i++) {
        const file = files[i];

        if (!allowedTypes.includes(file.type)) {
            alert(`${file.name} is not a supported file type.`);
            return;
        }

        if (file.size > 100 * 1024 * 1024) {
            alert(`${file.name} exceeds 100MB limit.`);
            return;
        }

        formData.append('files[]', file);
    }

    const xhr = new XMLHttpRequest();
    xhr.open('POST', '/upload', true);

    xhr.upload.onprogress = function (e) {
        if (e.lengthComputable) {
            const percent = Math.round((e.loaded / e.total) * 100);
            progressBar.style.width = percent + '%';
            progressBarText.textContent = percent + '%';
        }
    };

    xhr.onload = function () {
        if (xhr.status === 200) {
            alert('Upload successful!');
            progressBar.style.width = '0%';
            progressBarText.textContent = '0%';
            fileInput.value = '';
            fileList.innerHTML = '';
        } else {
            const response = JSON.parse(xhr.responseText);
            alert(response.error || 'Upload failed.');
        }
    };

    xhr.onerror = function () {
        alert('An error occurred while uploading.');
    };

    xhr.send(formData);
});


----------------------------------------------------

test_app.py

import unittest
from app import app, get_db_connection
from werkzeug.security import generate_password_hash

class FlaskTestCase(unittest.TestCase):

    def setUp(self):
        # Create a test database connection, and insert a test user.
        self.app = app.test_client()
        self.app.testing = True
        
        # Setup test data in the database
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # Create a test user
        cursor.execute("""
            INSERT INTO users (username, password_hash)
            VALUES (%s, %s)
        """, ('testuser', generate_password_hash('testpass')))
        conn.commit()
        cursor.close()
        conn.close()

    def tearDown(self):
        # Remove test data after each test
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("DELETE FROM users WHERE username = %s", ('testuser',))
        conn.commit()
        cursor.close()
        conn.close()

    def test_login_success(self):
        # Test a successful login and redirection
        response = self.app.post('/login', data=dict(username='testuser', password='testpass'))
        # Assert we are redirected to the upload page
        self.assertEqual(response.status_code, 302)
        self.assertIn(b'upload', response.data)  # 'upload' page should be part of the URL

    def test_login_failure(self):
        # Test an invalid login
        response = self.app.post('/login', data=dict(username='wronguser', password='wrongpass'))
        # Assert we are redirected back to the login page
        self.assertEqual(response.status_code, 302)
        self.assertIn(b'Invalid username or password', response.data)  # Flash message

if __name__ == '__main__':
    unittest.main()






















